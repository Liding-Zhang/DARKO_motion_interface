<?xml version="1.0"?>
<robot name="sensor_kinect4a" xmlns:xacro="http://wiki.ros.org/xacro">
  
  <xacro:include filename="$(find robotnik_sensors)/urdf/utils/inertia.urdf.xacro" />
  
  <xacro:property name="M_PI" value="3.1415926535897931" />

  <xacro:macro name="sensor_basler_ace" params="prefix prefix_topic parent *origin">
    
    <!-- Base joint for visual and collision model -->
    <joint name="${prefix}_joint" type="fixed">
      <xacro:insert_block name="origin" />
      <parent link="${parent}"/>
      <child link="${prefix}_link"/>
    </joint>
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 ${M_PI/2}"/>
        <geometry>
          <mesh filename="package://darko_description/meshes/basler_ace_with_m12_lens.dae"/>
        </geometry>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 ${M_PI/2}"/>
        <geometry>
          <mesh filename="package://darko_description/meshes/basler_ace_with_m12_lens.dae"/>
        </geometry>
      </collision>
      <inertial>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <mass value="0.1" />
        <xacro:solid_cuboid_inertia m="0.1" w="0.03" h="0.03" d="0.03" />
      </inertial>
    </link>

    <!-- RGB base link -->
    <joint name="${prefix}_rgb_joint" type="fixed">
      <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
      <parent link="${prefix}_link"/>
      <child link="${prefix}_rgb_base_link" />
    </joint>
    <link name="${prefix}_rgb_base_link"/>

    <!-- RGB camera to image space -->
    <joint name="${prefix}_rgb_optical_joint" type="fixed">
      <origin xyz="0 0 0" rpy="${-M_PI/2} 0 ${-M_PI/2}" />
      <parent link="${prefix}_rgb_base_link" />
      <child link="${prefix}_rgb_optical_frame" />
    </joint>
    <link name="${prefix}_rgb_optical_frame"/>

    <!-- Camera sensor for simulation -->
    <sensor_basler_cam_gazebo/>

  </xacro:macro>

  <!-- We model the following camera: https://www.baslerweb.com/de/produkte/kameras/flaechenkameras/ace/aca2040-120uc/ -->
  <xacro:macro name="sensor_basler_cam_gazebo">
    <gazebo reference="${prefix}_link">
      <sensor name="${prefix}_sensor" type="wideanglecamera">
        <always_on>false</always_on>
        <update_rate>1</update_rate>
        <camera>
          <horizontal_fov>${185.0*M_PI/180.0}</horizontal_fov>
          <image>
            <width>512</width>
            <height>384</height>
          </image>
          <clip>
            <near>0.1</near>
            <far>100</far>
          </clip>
          <lens>
            <type>custom</type>
            <!-- manually defined mapping function r = c1*f*fun(theta/c2 + c3) -->
            <!-- More information here: https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function -->
            <custom_function>  <!-- not sure which one best matches our lens -->
              <c1>1.05</c1> <!-- linear scaling -->
              <c2>4</c2> <!-- angle scaling -->
              <f>1.0</f> <!-- one more scaling parameter -->
              <fun>tan</fun> <!-- one of sin,tan,id -->
            </custom_function>
            <!-- if it is set to `true` your horizontal FOV will remain as defined -->
            <!-- othervise it depends on lens type and custom function, if there is one -->
            <scale_to_hfov>true</scale_to_hfov>
            <!-- clip everything that is outside of this angle -->
            <cutoff_angle>3.1415</cutoff_angle>
            <!-- resolution of the cubemap texture, the highter it is - the sharper is your image -->
            <env_texture_size>512</env_texture_size>
          </lens>
        </camera>
        <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
          <cameraName>${prefix_topic}</cameraName>
          <imageTopicName>image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <frameName>${prefix_topic}_link</frameName>
          <hackBaseline>0.07</hackBaseline> <!-- ??? -->
        </plugin>
      </sensor>
    </gazebo>
  </xacro:macro>

</robot>
