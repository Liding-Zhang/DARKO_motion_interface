<?xml version="1.0"?>
<robot name="sensor_kinect4a" xmlns:xacro="http://wiki.ros.org/xacro">
  
  <xacro:include filename="$(find robotnik_sensors)/urdf/utils/inertia.urdf.xacro" />
  
  <xacro:property name="M_PI" value="3.1415926535897931" />

  <!-- TODO: All values in here were copied from Kinect v2 and need fine-tuning! -->

  <xacro:macro name="sensor_kinect4a" params="prefix prefix_topic parent *origin wfov:=false">
    
    <!-- Base joint for visual and collision model -->
    <joint name="${prefix}_joint" type="fixed">
      <xacro:insert_block name="origin" />
      <parent link="${parent}"/>
      <child link="${prefix}_link"/>
    </joint>
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 ${M_PI/2}"/>
        <geometry>
          <mesh filename="package://darko_description/meshes/azure_kinect.dae"/>
        </geometry>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 ${M_PI/2}"/>
        <geometry>
          <mesh filename="package://darko_description/meshes/azure_kinect.dae"/>
        </geometry>
      </collision>
      <inertial>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <mass value="0.4" />
        <xacro:solid_cuboid_inertia m="0.4" w="0.12" h="0.15" d="0.04" />
      </inertial>
    </link>

    <!-- TODO: Not sure how well this is aligned with real-world K4A TF transforms -->
    <!-- RGB base link -->
    <joint name="${prefix}_rgb_joint" type="fixed">
      <origin xyz="0.055 -0.032 0.004" rpy="0 0 0"/>
      <parent link="${prefix}_link"/>
      <child link="${prefix}_rgb_base_link" />
    </joint>
    <link name="${prefix}_rgb_base_link"/>

    <!-- RGB camera to image space -->
    <joint name="${prefix}_rgb_optical_joint" type="fixed">
      <origin xyz="0 0 0" rpy="${-M_PI/2} 0 ${-M_PI/2}" />
      <parent link="${prefix}_rgb_base_link" />
      <child link="${prefix}_rgb_optical_frame" />
    </joint>
    <link name="${prefix}_rgb_optical_frame"/>

    <!-- The fixed joints & links below are usually published by static_transformers launched by the OpenNi launch
       files. However, for Gazebo simulation we need them, so we add them here.
       (Hence, don't publish them additionally!) -->
    <joint name="${prefix}_depth_joint" type="fixed">
      <origin xyz="0 0.032 0" rpy="0 0 0" />
      <parent link="${prefix}_rgb_base_link" />
      <child link="${prefix}_depth_link" />
    </joint>
    <link name="${prefix}_depth_link"/>

    <!-- Depth camera to image space -->
    <joint name="${prefix}_depth_optical_joint" type="fixed">
      <origin xyz="0 0 0" rpy="${-M_PI/2} 0 ${-M_PI/2}" />
      <parent link="${prefix}_depth_link" />
      <child link="${prefix}_depth_optical_frame" />
    </joint>
    <link name="${prefix}_depth_optical_frame"/>

    <!-- Kinect sensor for simulation -->
    <sensor_kinect4a_gazebo wfov="${wfov}"/>

  </xacro:macro>


  <xacro:macro name="sensor_kinect4a_gazebo" params="wfov:=false">
    <gazebo reference="${prefix}_link">
      <sensor type="depth" name="${prefix}_sensor">
        <always_on>false</always_on>
        <update_rate>10.0</update_rate>
        <camera>
          <xacro:if value="${wfov}">  <!-- WFOV 2x2 BINNED: RGB camera is limiting FoV to 90 deg horizontal -->
            <horizontal_fov>${90.0*M_PI/180.0}</horizontal_fov>
            <image>
              <format>R8G8B8</format>
              <width>512</width>
              <height>384</height>
            </image>
          </xacro:if>
          <xacro:unless value="${wfov}">  <!-- NFOV 2x2 BINNED: Depth camera is limiting FoV to 75 deg horizontal -->
            <horizontal_fov>${75.0*M_PI/180.0}</horizontal_fov>
            <image>
              <format>R8G8B8</format>
              <width>640</width>
              <height>576</height>
            </image>
          </xacro:unless>
          <clip>
            <near>0.1</near>
            <far>10.0</far>
          </clip>
        </camera>
        <plugin name="${prefix}_controller" filename="libgazebo_ros_openni_kinect.so">
          <cameraName>${prefix_topic}</cameraName>
          <alwaysOn>true</alwaysOn>
          <updateRate>0.0</updateRate> <!-- Keep this zero, update_rate in the parent <sensor> tag will control the frame rate. -->
          <imageTopicName>rgb_registered/image_raw</imageTopicName>
          <depthImageTopicName>depth_registered/image_raw</depthImageTopicName>
          <pointCloudTopicName>depth_registered/points</pointCloudTopicName>
          <cameraInfoTopicName>rgb_registered/camera_info</cameraInfoTopicName>
          <depthImageCameraInfoTopicName>depth_registered/camera_info</depthImageCameraInfoTopicName>
          <frameName>${prefix_topic}_depth_optical_frame</frameName>
          <baseline>0.032</baseline>
          <distortion_k1>0.0</distortion_k1>
          <distortion_k2>0.0</distortion_k2>
          <distortion_k3>0.0</distortion_k3>
          <distortion_t1>0.0</distortion_t1>
          <distortion_t2>0.0</distortion_t2>

          <xacro:if value="${wfov}">  <!-- WFOV 2x2 BINNED -->
            <pointCloudCutoff>0.25</pointCloudCutoff>
            <pointCloudCutoffMax>2.88</pointCloudCutoffMax>
          </xacro:if>
          <xacro:unless value="${wfov}">  <!-- NFOV 2x2 BINNED -->
            <pointCloudCutoff>0.5</pointCloudCutoff>
            <pointCloudCutoffMax>5.46</pointCloudCutoffMax>
          </xacro:unless>
        </plugin>
      </sensor>
    </gazebo>

  </xacro:macro>

</robot>
